{"ast":null,"code":"// import React, {useState} from 'react';\n// import axios from 'axios';\n// import { ToastContainer, toast } from 'react-toastify';\n// import \"react-toastify/dist/ReactToastify.css\";\n// // stripe\nimport { useStripe, useElements, CardElement } from '@stripe/react-stripe-js'; // // Util imports\n// import Button from '@material-ui/core/Button';\n// import Card from '@material-ui/core/Card';\n// import CardContent from '@material-ui/core/CardContent';\n// import TextField from '@material-ui/core/TextField';\n// // Custom Components\n// import CardInput from './Cardinput';\n// import {makeStyles} from '@material-ui/core/styles';\n// const useStyles = makeStyles({\n// \troot: {\n// \t  maxWidth: 500,\n// \t  margin: '35vh auto',\n// \t},\n// \tcontent: {\n// \t  display: 'flex',\n// \t  flexDirection: 'column',\n// \t  alignContent: 'flex-start',\n// \t},\n// \tdiv: {\n// \t  display: 'flex',\n// \t  flexDirection: 'row',\n// \t  alignContent: 'flex-start',\n// \t  justifyContent: 'space-between',\n// \t},\n// \tbutton: {\n// \t  margin: '2em auto 1em',\n// \t},\n//   });\n// export default function HomePage() {\n// \tconst classes = useStyles()\n//   // State\n//   const [email, setEmail] = useState('');\n//   const stripe = useStripe();\n//   const elements = useElements();\n//   const handleSubmit = async (event) => {\n// \tif (!stripe || !elements) {\n//       return;\n//     }\n//     const res = await axios.post('http://localhost:3000/pay', {email: email});\n//     const clientSecret = res.data['client_secret'];\n//     const result = await stripe.confirmCardPayment(clientSecret, {\n//       payment_method: {\n//         card: elements.getElement(CardElement),\n//         billing_details: {\n//           email: email,\n//         },\n//       },\n//     });\n//       // The payment has been processed!\n//       if (result.paymentIntent.status === 'succeeded') {\n// \t\ttoast.success(\"PAID\")\n//     } else {\n//       toast(\"Something went wrong\", { type: \"error\" });\n//     }\n//       }\n//   return (\n//    <div>\n//    <ToastContainer /> \n//    <Card className={classes.root}>\n//       <CardContent className={classes.content}>\n//         <TextField\n//           label='Email'\n//           id='outlined-email-input'\n//           helperText={`Email you'll recive updates and receipts on`}\n//           margin='normal'\n//           variant='outlined'\n//           type='email'\n//           required\n//           value={email}\n//           onChange={(e) => setEmail(e.target.value)}\n//           fullWidth\n//         />\n//         <CardInput />\n//         <div className={classes.div}>\n//           <Button variant=\"contained\" color=\"primary\" className={classes.button} onClick={handleSubmit}>\n//             Pay\n//           </Button>\n//         </div>\n//       </CardContent>\n//     </Card>\n// </div>\n//   );\n//   }\n\nconst stripe = Stripe(\"pk_test_51Jvn4JK9lSkN4Pbd01nuPW8nWnecj1PE9h2uApHKviNEpL3c1K9fDezkOC3KidOucoa5ROS0JosmfEOGjmKSQi9y00xZqQGwlB\"); // The items the customer wants to buy\n\nconst items = [{\n  id: \"xl-tshirt\"\n}];\nlet elements;\ninitialize();\ncheckStatus();\ndocument.querySelector(\"#payment-form\").addEventListener(\"submit\", handleSubmit); // Fetches a payment intent and captures the client secret\n\nasync function initialize() {\n  const response = await fetch(\"/create-payment-intent\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      items\n    })\n  });\n  const {\n    clientSecret\n  } = await response.json();\n  const appearance = {\n    theme: 'stripe'\n  };\n  elements = stripe.elements({\n    appearance,\n    clientSecret\n  });\n  const paymentElement = elements.create(\"payment\");\n  paymentElement.mount(\"#payment-element\");\n}\n\nasync function handleSubmit(e) {\n  e.preventDefault();\n  setLoading(true);\n  const {\n    error\n  } = await stripe.confirmPayment({\n    elements,\n    confirmParams: {\n      // Make sure to change this to your payment completion page\n      return_url: \"http://localhost:4242/checkout.html\"\n    }\n  }); // This point will only be reached if there is an immediate error when\n  // confirming the payment. Otherwise, your customer will be redirected to\n  // your `return_url`. For some payment methods like iDEAL, your customer will\n  // be redirected to an intermediate site first to authorize the payment, then\n  // redirected to the `return_url`.\n\n  if (error.type === \"card_error\" || error.type === \"validation_error\") {\n    showMessage(error.message);\n  } else {\n    showMessage(\"An unexpected error occured.\");\n  }\n\n  setLoading(false);\n} // Fetches the payment intent status after payment submission\n\n\nasync function checkStatus() {\n  const clientSecret = new URLSearchParams(window.location.search).get(\"payment_intent_client_secret\");\n\n  if (!clientSecret) {\n    return;\n  }\n\n  const {\n    paymentIntent\n  } = await stripe.retrievePaymentIntent(clientSecret);\n\n  switch (paymentIntent.status) {\n    case \"succeeded\":\n      showMessage(\"Payment succeeded!\");\n      break;\n\n    case \"processing\":\n      showMessage(\"Your payment is processing.\");\n      break;\n\n    case \"requires_payment_method\":\n      showMessage(\"Your payment was not successful, please try again.\");\n      break;\n\n    default:\n      showMessage(\"Something went wrong.\");\n      break;\n  }\n} // ------- UI helpers -------\n\n\nfunction showMessage(messageText) {\n  const messageContainer = document.querySelector(\"#payment-message\");\n  messageContainer.classList.remove(\"hidden\");\n  messageContainer.textContent = messageText;\n  setTimeout(function () {\n    messageContainer.classList.add(\"hidden\");\n    messageText.textContent = \"\";\n  }, 4000);\n} // Show a spinner on payment submission\n\n\nfunction setLoading(isLoading) {\n  if (isLoading) {\n    // Disable the button and show a spinner\n    document.querySelector(\"#submit\").disabled = true;\n    document.querySelector(\"#spinner\").classList.remove(\"hidden\");\n    document.querySelector(\"#button-text\").classList.add(\"hidden\");\n  } else {\n    document.querySelector(\"#submit\").disabled = false;\n    document.querySelector(\"#spinner\").classList.add(\"hidden\");\n    document.querySelector(\"#button-text\").classList.remove(\"hidden\");\n  }\n}","map":{"version":3,"sources":["/Users/jordanharris/Desktop/DigitalCrafts-Aug/Week13/SoloProject/vr-project/src/components/Checkout.js"],"names":["useStripe","useElements","CardElement","stripe","Stripe","items","id","elements","initialize","checkStatus","document","querySelector","addEventListener","handleSubmit","response","fetch","method","headers","body","JSON","stringify","clientSecret","json","appearance","theme","paymentElement","create","mount","e","preventDefault","setLoading","error","confirmPayment","confirmParams","return_url","type","showMessage","message","URLSearchParams","window","location","search","get","paymentIntent","retrievePaymentIntent","status","messageText","messageContainer","classList","remove","textContent","setTimeout","add","isLoading","disabled"],"mappings":"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","sourcesContent":["// import React, {useState} from 'react';\n// import axios from 'axios';\n// import { ToastContainer, toast } from 'react-toastify';\n// import \"react-toastify/dist/ReactToastify.css\";\n// // stripe\nimport {useStripe, useElements, CardElement} from '@stripe/react-stripe-js';\n// // Util imports\n// import Button from '@material-ui/core/Button';\n// import Card from '@material-ui/core/Card';\n// import CardContent from '@material-ui/core/CardContent';\n// import TextField from '@material-ui/core/TextField';\n// // Custom Components\n// import CardInput from './Cardinput';\n// import {makeStyles} from '@material-ui/core/styles';\n\n\n\n// const useStyles = makeStyles({\n// \troot: {\n// \t  maxWidth: 500,\n// \t  margin: '35vh auto',\n// \t},\n// \tcontent: {\n// \t  display: 'flex',\n// \t  flexDirection: 'column',\n// \t  alignContent: 'flex-start',\n// \t},\n// \tdiv: {\n// \t  display: 'flex',\n// \t  flexDirection: 'row',\n// \t  alignContent: 'flex-start',\n// \t  justifyContent: 'space-between',\n// \t},\n// \tbutton: {\n// \t  margin: '2em auto 1em',\n\t  \n// \t},\n\t\n\t\t\n\t\t\n\t\n\t\n//   });\n\n// export default function HomePage() {\n// \tconst classes = useStyles()\n//   // State\n//   const [email, setEmail] = useState('');\n\n//   const stripe = useStripe();\n//   const elements = useElements();\n\n//   const handleSubmit = async (event) => {\n   \n// \tif (!stripe || !elements) {\n   \n//       return;\n//     }\n\n//     const res = await axios.post('http://localhost:3000/pay', {email: email});\n\n//     const clientSecret = res.data['client_secret'];\n\n//     const result = await stripe.confirmCardPayment(clientSecret, {\n//       payment_method: {\n//         card: elements.getElement(CardElement),\n//         billing_details: {\n//           email: email,\n//         },\n//       },\n//     });\n\n  \n//       // The payment has been processed!\n//       if (result.paymentIntent.status === 'succeeded') {\n// \t\ttoast.success(\"PAID\")\n//     } else {\n//       toast(\"Something went wrong\", { type: \"error\" });\n//     }\n//       }\n    \n  \n  \n//   return (\n//    <div>\n//    <ToastContainer /> \n//    <Card className={classes.root}>\n//       <CardContent className={classes.content}>\n//         <TextField\n//           label='Email'\n//           id='outlined-email-input'\n//           helperText={`Email you'll recive updates and receipts on`}\n//           margin='normal'\n//           variant='outlined'\n//           type='email'\n//           required\n//           value={email}\n//           onChange={(e) => setEmail(e.target.value)}\n//           fullWidth\n//         />\n//         <CardInput />\n//         <div className={classes.div}>\n//           <Button variant=\"contained\" color=\"primary\" className={classes.button} onClick={handleSubmit}>\n//             Pay\n//           </Button>\n\t\t  \n//         </div>\n//       </CardContent>\n//     </Card>\n// </div>\n\n//   );\n\n//   }\n\n\nconst stripe = Stripe(\"pk_test_51Jvn4JK9lSkN4Pbd01nuPW8nWnecj1PE9h2uApHKviNEpL3c1K9fDezkOC3KidOucoa5ROS0JosmfEOGjmKSQi9y00xZqQGwlB\");\n\n// The items the customer wants to buy\nconst items = [{ id: \"xl-tshirt\" }];\n\nlet elements;\n\ninitialize();\ncheckStatus();\n\ndocument\n  .querySelector(\"#payment-form\")\n  .addEventListener(\"submit\", handleSubmit);\n\n// Fetches a payment intent and captures the client secret\nasync function initialize() {\n  const response = await fetch(\"/create-payment-intent\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ items }),\n  });\n  const { clientSecret } = await response.json();\n\n  const appearance = {\n    theme: 'stripe',\n  };\n  elements = stripe.elements({ appearance, clientSecret });\n\n  const paymentElement = elements.create(\"payment\");\n  paymentElement.mount(\"#payment-element\");\n}\n\nasync function handleSubmit(e) {\n  e.preventDefault();\n  setLoading(true);\n\n  const { error } = await stripe.confirmPayment({\n    elements,\n    confirmParams: {\n      // Make sure to change this to your payment completion page\n      return_url: \"http://localhost:4242/checkout.html\",\n    },\n  });\n\n  // This point will only be reached if there is an immediate error when\n  // confirming the payment. Otherwise, your customer will be redirected to\n  // your `return_url`. For some payment methods like iDEAL, your customer will\n  // be redirected to an intermediate site first to authorize the payment, then\n  // redirected to the `return_url`.\n  if (error.type === \"card_error\" || error.type === \"validation_error\") {\n    showMessage(error.message);\n  } else {\n    showMessage(\"An unexpected error occured.\");\n  }\n\n  setLoading(false);\n}\n\n// Fetches the payment intent status after payment submission\nasync function checkStatus() {\n  const clientSecret = new URLSearchParams(window.location.search).get(\n    \"payment_intent_client_secret\"\n  );\n\n  if (!clientSecret) {\n    return;\n  }\n\n  const { paymentIntent } = await stripe.retrievePaymentIntent(clientSecret);\n\n  switch (paymentIntent.status) {\n    case \"succeeded\":\n      showMessage(\"Payment succeeded!\");\n      break;\n    case \"processing\":\n      showMessage(\"Your payment is processing.\");\n      break;\n    case \"requires_payment_method\":\n      showMessage(\"Your payment was not successful, please try again.\");\n      break;\n    default:\n      showMessage(\"Something went wrong.\");\n      break;\n  }\n}\n\n// ------- UI helpers -------\n\nfunction showMessage(messageText) {\n  const messageContainer = document.querySelector(\"#payment-message\");\n\n  messageContainer.classList.remove(\"hidden\");\n  messageContainer.textContent = messageText;\n\n  setTimeout(function () {\n    messageContainer.classList.add(\"hidden\");\n    messageText.textContent = \"\";\n  }, 4000);\n}\n\n// Show a spinner on payment submission\nfunction setLoading(isLoading) {\n  if (isLoading) {\n    // Disable the button and show a spinner\n    document.querySelector(\"#submit\").disabled = true;\n    document.querySelector(\"#spinner\").classList.remove(\"hidden\");\n    document.querySelector(\"#button-text\").classList.add(\"hidden\");\n  } else {\n    document.querySelector(\"#submit\").disabled = false;\n    document.querySelector(\"#spinner\").classList.add(\"hidden\");\n    document.querySelector(\"#button-text\").classList.remove(\"hidden\");\n  }\n}"]},"metadata":{},"sourceType":"module"}