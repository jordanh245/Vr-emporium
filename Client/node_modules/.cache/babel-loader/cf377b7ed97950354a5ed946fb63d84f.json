{"ast":null,"code":"import{ReactReduxContext}from'../components/Context';import{useStore as useDefaultStore,createStoreHook}from'./useStore';/**\n * Hook factory, which creates a `useDispatch` hook bound to a given context.\n *\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\n * @returns {Function} A `useDispatch` hook bound to the specified context.\n */export function createDispatchHook(context){if(context===void 0){context=ReactReduxContext;}var useStore=context===ReactReduxContext?useDefaultStore:createStoreHook(context);return function useDispatch(){var store=useStore();return store.dispatch;};}/**\n * A hook to access the redux `dispatch` function.\n *\n * @returns {any|function} redux store's `dispatch` function\n *\n * @example\n *\n * import React, { useCallback } from 'react'\n * import { useDispatch } from 'react-redux'\n *\n * export const CounterComponent = ({ value }) => {\n *   const dispatch = useDispatch()\n *   const increaseCounter = useCallback(() => dispatch({ type: 'increase-counter' }), [])\n *   return (\n *     <div>\n *       <span>{value}</span>\n *       <button onClick={increaseCounter}>Increase counter</button>\n *     </div>\n *   )\n * }\n */export var useDispatch=/*#__PURE__*/createDispatchHook();","map":{"version":3,"sources":["/Users/jordanharris/Desktop/Vr-emporium/Client/src/node_modules/react-redux/es/hooks/useDispatch.js"],"names":["ReactReduxContext","useStore","useDefaultStore","createStoreHook","createDispatchHook","context","useDispatch","store","dispatch"],"mappings":"AAAA,OAASA,iBAAT,KAAkC,uBAAlC,CACA,OAASC,QAAQ,GAAIC,CAAAA,eAArB,CAAsCC,eAAtC,KAA6D,YAA7D,CACA;AACA;AACA;AACA;AACA;AACA,GAEA,MAAO,SAASC,CAAAA,kBAAT,CAA4BC,OAA5B,CAAqC,CAC1C,GAAIA,OAAO,GAAK,IAAK,EAArB,CAAwB,CACtBA,OAAO,CAAGL,iBAAV,CACD,CAED,GAAIC,CAAAA,QAAQ,CAAGI,OAAO,GAAKL,iBAAZ,CAAgCE,eAAhC,CAAkDC,eAAe,CAACE,OAAD,CAAhF,CACA,MAAO,SAASC,CAAAA,WAAT,EAAuB,CAC5B,GAAIC,CAAAA,KAAK,CAAGN,QAAQ,EAApB,CACA,MAAOM,CAAAA,KAAK,CAACC,QAAb,CACD,CAHD,CAID,CACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA,MAAO,IAAIF,CAAAA,WAAW,CAAG,aAAaF,kBAAkB,EAAjD","sourcesContent":["import { ReactReduxContext } from '../components/Context';\nimport { useStore as useDefaultStore, createStoreHook } from './useStore';\n/**\n * Hook factory, which creates a `useDispatch` hook bound to a given context.\n *\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\n * @returns {Function} A `useDispatch` hook bound to the specified context.\n */\n\nexport function createDispatchHook(context) {\n  if (context === void 0) {\n    context = ReactReduxContext;\n  }\n\n  var useStore = context === ReactReduxContext ? useDefaultStore : createStoreHook(context);\n  return function useDispatch() {\n    var store = useStore();\n    return store.dispatch;\n  };\n}\n/**\n * A hook to access the redux `dispatch` function.\n *\n * @returns {any|function} redux store's `dispatch` function\n *\n * @example\n *\n * import React, { useCallback } from 'react'\n * import { useDispatch } from 'react-redux'\n *\n * export const CounterComponent = ({ value }) => {\n *   const dispatch = useDispatch()\n *   const increaseCounter = useCallback(() => dispatch({ type: 'increase-counter' }), [])\n *   return (\n *     <div>\n *       <span>{value}</span>\n *       <button onClick={increaseCounter}>Increase counter</button>\n *     </div>\n *   )\n * }\n */\n\nexport var useDispatch = /*#__PURE__*/createDispatchHook();"]},"metadata":{},"sourceType":"module"}