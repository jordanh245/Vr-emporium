{"ast":null,"code":"var isarray=require('isarray');/**\n * Expose `pathToRegexp`.\n */module.exports=pathToRegexp;module.exports.parse=parse;module.exports.compile=compile;module.exports.tokensToFunction=tokensToFunction;module.exports.tokensToRegExp=tokensToRegExp;/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */var PATH_REGEXP=new RegExp([// Match escaped characters that would otherwise appear in future matches.\n// This allows the user to escape special characters that won't transform.\n'(\\\\\\\\.)',// Match Express-style parameters and un-named parameters with a prefix\n// and optional suffixes. Matches appear as:\n//\n// \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\", undefined]\n// \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined, undefined]\n// \"/*\"            => [\"/\", undefined, undefined, undefined, undefined, \"*\"]\n'([\\\\/.])?(?:(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?|(\\\\*))'].join('|'),'g');/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */function parse(str,options){var tokens=[];var key=0;var index=0;var path='';var defaultDelimiter=options&&options.delimiter||'/';var res;while((res=PATH_REGEXP.exec(str))!=null){var m=res[0];var escaped=res[1];var offset=res.index;path+=str.slice(index,offset);index=offset+m.length;// Ignore already escaped sequences.\nif(escaped){path+=escaped[1];continue;}var next=str[index];var prefix=res[2];var name=res[3];var capture=res[4];var group=res[5];var modifier=res[6];var asterisk=res[7];// Push the current path onto the tokens.\nif(path){tokens.push(path);path='';}var partial=prefix!=null&&next!=null&&next!==prefix;var repeat=modifier==='+'||modifier==='*';var optional=modifier==='?'||modifier==='*';var delimiter=res[2]||defaultDelimiter;var pattern=capture||group;tokens.push({name:name||key++,prefix:prefix||'',delimiter:delimiter,optional:optional,repeat:repeat,partial:partial,asterisk:!!asterisk,pattern:pattern?escapeGroup(pattern):asterisk?'.*':'[^'+escapeString(delimiter)+']+?'});}// Match any characters still remaining.\nif(index<str.length){path+=str.substr(index);}// If the path exists, push it onto the end.\nif(path){tokens.push(path);}return tokens;}/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */function compile(str,options){return tokensToFunction(parse(str,options),options);}/**\n * Prettier encoding of URI path segments.\n *\n * @param  {string}\n * @return {string}\n */function encodeURIComponentPretty(str){return encodeURI(str).replace(/[\\/?#]/g,function(c){return'%'+c.charCodeAt(0).toString(16).toUpperCase();});}/**\n * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.\n *\n * @param  {string}\n * @return {string}\n */function encodeAsterisk(str){return encodeURI(str).replace(/[?#]/g,function(c){return'%'+c.charCodeAt(0).toString(16).toUpperCase();});}/**\n * Expose a method for transforming tokens into the path function.\n */function tokensToFunction(tokens,options){// Compile all the tokens into regexps.\nvar matches=new Array(tokens.length);// Compile all the patterns before compilation.\nfor(var i=0;i<tokens.length;i++){if(typeof tokens[i]==='object'){matches[i]=new RegExp('^(?:'+tokens[i].pattern+')$',flags(options));}}return function(obj,opts){var path='';var data=obj||{};var options=opts||{};var encode=options.pretty?encodeURIComponentPretty:encodeURIComponent;for(var i=0;i<tokens.length;i++){var token=tokens[i];if(typeof token==='string'){path+=token;continue;}var value=data[token.name];var segment;if(value==null){if(token.optional){// Prepend partial segment prefixes.\nif(token.partial){path+=token.prefix;}continue;}else{throw new TypeError('Expected \"'+token.name+'\" to be defined');}}if(isarray(value)){if(!token.repeat){throw new TypeError('Expected \"'+token.name+'\" to not repeat, but received `'+JSON.stringify(value)+'`');}if(value.length===0){if(token.optional){continue;}else{throw new TypeError('Expected \"'+token.name+'\" to not be empty');}}for(var j=0;j<value.length;j++){segment=encode(value[j]);if(!matches[i].test(segment)){throw new TypeError('Expected all \"'+token.name+'\" to match \"'+token.pattern+'\", but received `'+JSON.stringify(segment)+'`');}path+=(j===0?token.prefix:token.delimiter)+segment;}continue;}segment=token.asterisk?encodeAsterisk(value):encode(value);if(!matches[i].test(segment)){throw new TypeError('Expected \"'+token.name+'\" to match \"'+token.pattern+'\", but received \"'+segment+'\"');}path+=token.prefix+segment;}return path;};}/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */function escapeString(str){return str.replace(/([.+*?=^!:${}()[\\]|\\/\\\\])/g,'\\\\$1');}/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */function escapeGroup(group){return group.replace(/([=!:$\\/()])/g,'\\\\$1');}/**\n * Attach the keys as a property of the regexp.\n *\n * @param  {!RegExp} re\n * @param  {Array}   keys\n * @return {!RegExp}\n */function attachKeys(re,keys){re.keys=keys;return re;}/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */function flags(options){return options&&options.sensitive?'':'i';}/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {!Array}  keys\n * @return {!RegExp}\n */function regexpToRegexp(path,keys){// Use a negative lookahead to match only capturing groups.\nvar groups=path.source.match(/\\((?!\\?)/g);if(groups){for(var i=0;i<groups.length;i++){keys.push({name:i,prefix:null,delimiter:null,optional:false,repeat:false,partial:false,asterisk:false,pattern:null});}}return attachKeys(path,keys);}/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array}   keys\n * @param  {!Object} options\n * @return {!RegExp}\n */function arrayToRegexp(path,keys,options){var parts=[];for(var i=0;i<path.length;i++){parts.push(pathToRegexp(path[i],keys,options).source);}var regexp=new RegExp('(?:'+parts.join('|')+')',flags(options));return attachKeys(regexp,keys);}/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {!Array}  keys\n * @param  {!Object} options\n * @return {!RegExp}\n */function stringToRegexp(path,keys,options){return tokensToRegExp(parse(path,options),keys,options);}/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}          tokens\n * @param  {(Array|Object)=} keys\n * @param  {Object=}         options\n * @return {!RegExp}\n */function tokensToRegExp(tokens,keys,options){if(!isarray(keys)){options=/** @type {!Object} */keys||options;keys=[];}options=options||{};var strict=options.strict;var end=options.end!==false;var route='';// Iterate over the tokens and create our regexp string.\nfor(var i=0;i<tokens.length;i++){var token=tokens[i];if(typeof token==='string'){route+=escapeString(token);}else{var prefix=escapeString(token.prefix);var capture='(?:'+token.pattern+')';keys.push(token);if(token.repeat){capture+='(?:'+prefix+capture+')*';}if(token.optional){if(!token.partial){capture='(?:'+prefix+'('+capture+'))?';}else{capture=prefix+'('+capture+')?';}}else{capture=prefix+'('+capture+')';}route+=capture;}}var delimiter=escapeString(options.delimiter||'/');var endsWithDelimiter=route.slice(-delimiter.length)===delimiter;// In non-strict mode we allow a slash at the end of match. If the path to\n// match already ends with a slash, we remove it for consistency. The slash\n// is valid at the end of a path match, not in the middle. This is important\n// in non-ending mode, where \"/test/\" shouldn't match \"/test//route\".\nif(!strict){route=(endsWithDelimiter?route.slice(0,-delimiter.length):route)+'(?:'+delimiter+'(?=$))?';}if(end){route+='$';}else{// In non-ending mode, we need the capturing groups to match as much as\n// possible by using a positive lookahead to the end or next path segment.\nroute+=strict&&endsWithDelimiter?'':'(?='+delimiter+'|$)';}return attachKeys(new RegExp('^'+route,flags(options)),keys);}/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {(Array|Object)=}       keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */function pathToRegexp(path,keys,options){if(!isarray(keys)){options=/** @type {!Object} */keys||options;keys=[];}options=options||{};if(path instanceof RegExp){return regexpToRegexp(path,/** @type {!Array} */keys);}if(isarray(path)){return arrayToRegexp(/** @type {!Array} */path,/** @type {!Array} */keys,options);}return stringToRegexp(/** @type {string} */path,/** @type {!Array} */keys,options);}","map":{"version":3,"sources":["/Users/jordanharris/Desktop/Vr-emporium/Client/src/node_modules/react-router/node_modules/path-to-regexp/index.js"],"names":["isarray","require","module","exports","pathToRegexp","parse","compile","tokensToFunction","tokensToRegExp","PATH_REGEXP","RegExp","join","str","options","tokens","key","index","path","defaultDelimiter","delimiter","res","exec","m","escaped","offset","slice","length","next","prefix","name","capture","group","modifier","asterisk","push","partial","repeat","optional","pattern","escapeGroup","escapeString","substr","encodeURIComponentPretty","encodeURI","replace","c","charCodeAt","toString","toUpperCase","encodeAsterisk","matches","Array","i","flags","obj","opts","data","encode","pretty","encodeURIComponent","token","value","segment","TypeError","JSON","stringify","j","test","attachKeys","re","keys","sensitive","regexpToRegexp","groups","source","match","arrayToRegexp","parts","regexp","stringToRegexp","strict","end","route","endsWithDelimiter"],"mappings":"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","sourcesContent":["var isarray = require('isarray')\n\n/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp\nmodule.exports.parse = parse\nmodule.exports.compile = compile\nmodule.exports.tokensToFunction = tokensToFunction\nmodule.exports.tokensToRegExp = tokensToRegExp\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\", undefined]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined, undefined]\n  // \"/*\"            => [\"/\", undefined, undefined, undefined, undefined, \"*\"]\n  '([\\\\/.])?(?:(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?|(\\\\*))'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = []\n  var key = 0\n  var index = 0\n  var path = ''\n  var defaultDelimiter = options && options.delimiter || '/'\n  var res\n\n  while ((res = PATH_REGEXP.exec(str)) != null) {\n    var m = res[0]\n    var escaped = res[1]\n    var offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      continue\n    }\n\n    var next = str[index]\n    var prefix = res[2]\n    var name = res[3]\n    var capture = res[4]\n    var group = res[5]\n    var modifier = res[6]\n    var asterisk = res[7]\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n    }\n\n    var partial = prefix != null && next != null && next !== prefix\n    var repeat = modifier === '+' || modifier === '*'\n    var optional = modifier === '?' || modifier === '*'\n    var delimiter = res[2] || defaultDelimiter\n    var pattern = capture || group\n\n    tokens.push({\n      name: name || key++,\n      prefix: prefix || '',\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      asterisk: !!asterisk,\n      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')\n    })\n  }\n\n  // Match any characters still remaining.\n  if (index < str.length) {\n    path += str.substr(index)\n  }\n\n  // If the path exists, push it onto the end.\n  if (path) {\n    tokens.push(path)\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options), options)\n}\n\n/**\n * Prettier encoding of URI path segments.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeURIComponentPretty (str) {\n  return encodeURI(str).replace(/[\\/?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeAsterisk (str) {\n  return encodeURI(str).replace(/[?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens, options) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$', flags(options))\n    }\n  }\n\n  return function (obj, opts) {\n    var path = ''\n    var data = obj || {}\n    var options = opts || {}\n    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n\n        continue\n      }\n\n      var value = data[token.name]\n      var segment\n\n      if (value == null) {\n        if (token.optional) {\n          // Prepend partial segment prefixes.\n          if (token.partial) {\n            path += token.prefix\n          }\n\n          continue\n        } else {\n          throw new TypeError('Expected \"' + token.name + '\" to be defined')\n        }\n      }\n\n      if (isarray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but received `' + JSON.stringify(value) + '`')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) {\n            continue\n          } else {\n            throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n          }\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j])\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\", but received `' + JSON.stringify(segment) + '`')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      segment = token.asterisk ? encodeAsterisk(value) : encode(value)\n\n      if (!matches[i].test(segment)) {\n        throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but received \"' + segment + '\"')\n      }\n\n      path += token.prefix + segment\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|\\/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$\\/()])/g, '\\\\$1')\n}\n\n/**\n * Attach the keys as a property of the regexp.\n *\n * @param  {!RegExp} re\n * @param  {Array}   keys\n * @return {!RegExp}\n */\nfunction attachKeys (re, keys) {\n  re.keys = keys\n  return re\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options && options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {!Array}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        asterisk: false,\n        pattern: null\n      })\n    }\n  }\n\n  return attachKeys(path, keys)\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array}   keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = []\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options))\n\n  return attachKeys(regexp, keys)\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {!Array}  keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}          tokens\n * @param  {(Array|Object)=} keys\n * @param  {Object=}         options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  var strict = options.strict\n  var end = options.end !== false\n  var route = ''\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n    } else {\n      var prefix = escapeString(token.prefix)\n      var capture = '(?:' + token.pattern + ')'\n\n      keys.push(token)\n\n      if (token.repeat) {\n        capture += '(?:' + prefix + capture + ')*'\n      }\n\n      if (token.optional) {\n        if (!token.partial) {\n          capture = '(?:' + prefix + '(' + capture + '))?'\n        } else {\n          capture = prefix + '(' + capture + ')?'\n        }\n      } else {\n        capture = prefix + '(' + capture + ')'\n      }\n\n      route += capture\n    }\n  }\n\n  var delimiter = escapeString(options.delimiter || '/')\n  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter\n\n  // In non-strict mode we allow a slash at the end of match. If the path to\n  // match already ends with a slash, we remove it for consistency. The slash\n  // is valid at the end of a path match, not in the middle. This is important\n  // in non-ending mode, where \"/test/\" shouldn't match \"/test//route\".\n  if (!strict) {\n    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?'\n  }\n\n  if (end) {\n    route += '$'\n  } else {\n    // In non-ending mode, we need the capturing groups to match as much as\n    // possible by using a positive lookahead to the end or next path segment.\n    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)'\n  }\n\n  return attachKeys(new RegExp('^' + route, flags(options)), keys)\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {(Array|Object)=}       keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, /** @type {!Array} */ (keys))\n  }\n\n  if (isarray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)\n}\n"]},"metadata":{},"sourceType":"module"}