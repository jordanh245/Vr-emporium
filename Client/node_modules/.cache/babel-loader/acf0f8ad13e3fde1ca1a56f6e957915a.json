{"ast":null,"code":"import{useContext}from'react';import{ReactReduxContext}from'../components/Context';import{useReduxContext as useDefaultReduxContext}from'./useReduxContext';/**\n * Hook factory, which creates a `useStore` hook bound to a given context.\n *\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\n * @returns {Function} A `useStore` hook bound to the specified context.\n */export function createStoreHook(context){if(context===void 0){context=ReactReduxContext;}var useReduxContext=context===ReactReduxContext?useDefaultReduxContext:function(){return useContext(context);};return function useStore(){var _useReduxContext=useReduxContext(),store=_useReduxContext.store;return store;};}/**\n * A hook to access the redux store.\n *\n * @returns {any} the redux store\n *\n * @example\n *\n * import React from 'react'\n * import { useStore } from 'react-redux'\n *\n * export const ExampleComponent = () => {\n *   const store = useStore()\n *   return <div>{store.getState()}</div>\n * }\n */export var useStore=/*#__PURE__*/createStoreHook();","map":{"version":3,"sources":["/Users/jordanharris/Desktop/Vr-emporium/Client/src/node_modules/react-redux/es/hooks/useStore.js"],"names":["useContext","ReactReduxContext","useReduxContext","useDefaultReduxContext","createStoreHook","context","useStore","_useReduxContext","store"],"mappings":"AAAA,OAASA,UAAT,KAA2B,OAA3B,CACA,OAASC,iBAAT,KAAkC,uBAAlC,CACA,OAASC,eAAe,GAAIC,CAAAA,sBAA5B,KAA0D,mBAA1D,CACA;AACA;AACA;AACA;AACA;AACA,GAEA,MAAO,SAASC,CAAAA,eAAT,CAAyBC,OAAzB,CAAkC,CACvC,GAAIA,OAAO,GAAK,IAAK,EAArB,CAAwB,CACtBA,OAAO,CAAGJ,iBAAV,CACD,CAED,GAAIC,CAAAA,eAAe,CAAGG,OAAO,GAAKJ,iBAAZ,CAAgCE,sBAAhC,CAAyD,UAAY,CACzF,MAAOH,CAAAA,UAAU,CAACK,OAAD,CAAjB,CACD,CAFD,CAGA,MAAO,SAASC,CAAAA,QAAT,EAAoB,CACzB,GAAIC,CAAAA,gBAAgB,CAAGL,eAAe,EAAtC,CACIM,KAAK,CAAGD,gBAAgB,CAACC,KAD7B,CAGA,MAAOA,CAAAA,KAAP,CACD,CALD,CAMD,CACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA,MAAO,IAAIF,CAAAA,QAAQ,CAAG,aAAaF,eAAe,EAA3C","sourcesContent":["import { useContext } from 'react';\nimport { ReactReduxContext } from '../components/Context';\nimport { useReduxContext as useDefaultReduxContext } from './useReduxContext';\n/**\n * Hook factory, which creates a `useStore` hook bound to a given context.\n *\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\n * @returns {Function} A `useStore` hook bound to the specified context.\n */\n\nexport function createStoreHook(context) {\n  if (context === void 0) {\n    context = ReactReduxContext;\n  }\n\n  var useReduxContext = context === ReactReduxContext ? useDefaultReduxContext : function () {\n    return useContext(context);\n  };\n  return function useStore() {\n    var _useReduxContext = useReduxContext(),\n        store = _useReduxContext.store;\n\n    return store;\n  };\n}\n/**\n * A hook to access the redux store.\n *\n * @returns {any} the redux store\n *\n * @example\n *\n * import React from 'react'\n * import { useStore } from 'react-redux'\n *\n * export const ExampleComponent = () => {\n *   const store = useStore()\n *   return <div>{store.getState()}</div>\n * }\n */\n\nexport var useStore = /*#__PURE__*/createStoreHook();"]},"metadata":{},"sourceType":"module"}